/*
 * @Author: Cat9Yuko 
 * @Date: 2020-09-29 16:27:41 
 * @Last Modified by: Cat9Yuko
 * @Last Modified time: 2020-09-29 16:43:10
 */


//  Thunk函数
// Thunk函数是自动执行Generator函数的一种方法.
// Thunk函数早在上个世纪60年代就诞生了. 那时, 编程语言刚刚起步, 计算机科学家还在研究如何编写编译器比较好. 一个争论的焦点时 "求值策略", 即函数的参数到底应该在何时求值.
var x = 1;

function f(m) {
    return m * 2;
}
f(x + 5)
// 传值调用时, 等用于
f(6)
// 另一种意见是 "传名调用" (call by name), 即直接将表达式x + 5传入函数体, 只在用到它的时候求值. Haskell语言采用这种策略
f(x + 5)
// 传名调用时, 等同于
(x + 5) * 2
// 传值调用和传名调用, 哪一种比较好?
// 答案是各有利弊. 传值调用比较简单, 但是对参数求值的时候, 实际上还没有用到这个参数, 有可能造成性能损失.
function f(a, b) {
    return b;
}
f(3 * x * x - 2 * x - 1, x);

/* 上面的代码中, 函数f的第一个参数是一个复杂的表达式, 但是函数体内根本没用到. 对这个参数求值实际上是不必要的. 因此, 有一些计算机科学家倾向于 "传名调用", 即只在执行时求值 */